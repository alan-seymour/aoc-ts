import { describe, test, expect, beforeEach } from 'vitest';
import {
  Puzzle202020,
  parseInput,
  Tile,
  transposeTile,
  flipTileHorizontally,
  flipTileVertically,
  rotateTileRight,
  rotateTileLeft,
} from './202020';

let day: Puzzle202020;

describe('202020', () => {
  beforeEach(() => {
    day = new Puzzle202020('');
  });

  test('parseInput', () => {
    const input = `Tile 1234:
    ...
    .#.
    ###

    Tile 2345:
    ###
    ##.
    #..`;

    const result = parseInput(input);

    expect(result).toMatchObject([
      {
        id: 1234,
        cells: [
          ['.', '.', '.'],
          ['.', '#', '.'],
          ['#', '#', '#'],
        ],
        edges: {
          top: ['.', '.', '.'],
          left: ['.', '.', '#'],
          right: ['.', '.', '#'],
          bottom: ['#', '#', '#'],
        },
      },
      {
        id: 2345,
        cells: [
          ['#', '#', '#'],
          ['#', '#', '.'],
          ['#', '.', '.'],
        ],
        edges: {
          top: ['#', '#', '#'],
          left: ['#', '#', '#'],
          right: ['#', '.', '.'],
          bottom: ['#', '.', '.'],
        },
      },
    ]);
  });

  test('transpose tile', () => {
    const input: Tile = {
      id: 1234,
      cells: [
        ['a', 'b', 'c', 'd'],
        ['e', 'f', 'g', 'h'],
        ['i', 'j', 'k', 'l'],
        ['m', 'n', 'o', 'p'],
      ],
      edges: {
        top: ['a', 'b', 'c', 'd'],
        bottom: ['m', 'n', 'o', 'p'],
        left: ['a', 'e', 'i', 'm'],
        right: ['d', 'h', 'l', 'p'],
      },
    };

    const result = transposeTile(input);

    expect(result).toMatchObject({
      id: 1234,
      cells: [
        ['a', 'e', 'i', 'm'],
        ['b', 'f', 'j', 'n'],
        ['c', 'g', 'k', 'o'],
        ['d', 'h', 'l', 'p'],
      ],
      edges: {
        top: ['a', 'e', 'i', 'm'],
        bottom: ['d', 'h', 'l', 'p'],
        left: ['a', 'b', 'c', 'd'],
        right: ['m', 'n', 'o', 'p'],
      },
    });
  });

  test('flip tile horizontally', () => {
    const input: Tile = {
      id: 1234,
      cells: [
        ['a', 'b', 'c', 'd'],
        ['e', 'f', 'g', 'h'],
        ['i', 'j', 'k', 'l'],
        ['m', 'n', 'o', 'p'],
      ],
      edges: {
        top: ['a', 'b', 'c', 'd'],
        bottom: ['m', 'n', 'o', 'p'],
        left: ['a', 'e', 'i', 'm'],
        right: ['d', 'h', 'l', 'p'],
      },
    };

    const result = flipTileHorizontally(input);

    expect(result).toMatchObject({
      id: 1234,
      cells: [
        ['d', 'c', 'b', 'a'],
        ['h', 'g', 'f', 'e'],
        ['l', 'k', 'j', 'i'],
        ['p', 'o', 'n', 'm'],
      ],
      edges: {
        top: ['d', 'c', 'b', 'a'],
        bottom: ['p', 'o', 'n', 'm'],
        left: ['d', 'h', 'l', 'p'],
        right: ['a', 'e', 'i', 'm'],
      },
    });
  });

  test('flip tile vertically', () => {
    const input: Tile = {
      id: 1234,
      cells: [
        ['a', 'b', 'c', 'd'],
        ['e', 'f', 'g', 'h'],
        ['i', 'j', 'k', 'l'],
        ['m', 'n', 'o', 'p'],
      ],
      edges: {
        top: ['a', 'b', 'c', 'd'],
        bottom: ['m', 'n', 'o', 'p'],
        left: ['a', 'e', 'i', 'm'],
        right: ['d', 'h', 'l', 'p'],
      },
    };

    const result = flipTileVertically(input);

    expect(result).toMatchObject({
      id: 1234,
      cells: [
        ['m', 'n', 'o', 'p'],
        ['i', 'j', 'k', 'l'],
        ['e', 'f', 'g', 'h'],
        ['a', 'b', 'c', 'd'],
      ],
      edges: {
        top: ['m', 'n', 'o', 'p'],
        bottom: ['a', 'b', 'c', 'd'],
        left: ['m', 'i', 'e', 'a'],
        right: ['p', 'l', 'h', 'd'],
      },
    });
  });

  test('rotate tile right', () => {
    const input: Tile = {
      id: 1234,
      cells: [
        ['a', 'b', 'c', 'd'],
        ['e', 'f', 'g', 'h'],
        ['i', 'j', 'k', 'l'],
        ['m', 'n', 'o', 'p'],
      ],
      edges: {
        top: ['a', 'b', 'c', 'd'],
        bottom: ['m', 'n', 'o', 'p'],
        left: ['a', 'e', 'i', 'm'],
        right: ['d', 'h', 'l', 'p'],
      },
    };

    const result = rotateTileRight(input);

    expect(result).toMatchObject({
      id: 1234,
      cells: [
        ['m', 'i', 'e', 'a'],
        ['n', 'j', 'f', 'b'],
        ['o', 'k', 'g', 'c'],
        ['p', 'l', 'h', 'd'],
      ],
      edges: {
        top: ['m', 'i', 'e', 'a'],
        bottom: ['p', 'l', 'h', 'd'],
        left: ['m', 'n', 'o', 'p'],
        right: ['a', 'b', 'c', 'd'],
      },
    });
  });

  test('rotate tile left', () => {
    const input: Tile = {
      id: 1234,
      cells: [
        ['a', 'b', 'c', 'd'],
        ['e', 'f', 'g', 'h'],
        ['i', 'j', 'k', 'l'],
        ['m', 'n', 'o', 'p'],
      ],
      edges: {
        top: ['a', 'b', 'c', 'd'],
        bottom: ['m', 'n', 'o', 'p'],
        left: ['a', 'e', 'i', 'm'],
        right: ['d', 'h', 'l', 'p'],
      },
    };

    const result = rotateTileLeft(input);

    expect(result).toMatchObject({
      id: 1234,
      cells: [
        ['d', 'h', 'l', 'p'],
        ['c', 'g', 'k', 'o'],
        ['b', 'f', 'j', 'n'],
        ['a', 'e', 'i', 'm'],
      ],
      edges: {
        top: ['d', 'h', 'l', 'p'],
        bottom: ['a', 'e', 'i', 'm'],
        left: ['d', 'c', 'b', 'a'],
        right: ['p', 'o', 'n', 'm'],
      },
    });
  });

  test('part 1 example 1', () => {
    day.loadData(`Tile 2311:
    ..##.#..#.
    ##..#.....
    #...##..#.
    ####.#...#
    ##.##.###.
    ##...#.###
    .#.#.#..##
    ..#....#..
    ###...#.#.
    ..###..###

    Tile 1951:
    #.##...##.
    #.####...#
    .....#..##
    #...######
    .##.#....#
    .###.#####
    ###.##.##.
    .###....#.
    ..#.#..#.#
    #...##.#..

    Tile 1171:
    ####...##.
    #..##.#..#
    ##.#..#.#.
    .###.####.
    ..###.####
    .##....##.
    .#...####.
    #.##.####.
    ####..#...
    .....##...

    Tile 1427:
    ###.##.#..
    .#..#.##..
    .#.##.#..#
    #.#.#.##.#
    ....#...##
    ...##..##.
    ...#.#####
    .#.####.#.
    ..#..###.#
    ..##.#..#.

    Tile 1489:
    ##.#.#....
    ..##...#..
    .##..##...
    ..#...#...
    #####...#.
    #..#.#.#.#
    ...#.#.#..
    ##.#...##.
    ..##.##.##
    ###.##.#..

    Tile 2473:
    #....####.
    #..#.##...
    #.##..#...
    ######.#.#
    .#...#.#.#
    .#########
    .###.#..#.
    ########.#
    ##...##.#.
    ..###.#.#.

    Tile 2971:
    ..#.#....#
    #...###...
    #.#.###...
    ##.##..#..
    .#####..##
    .#..####.#
    #..#.#..#.
    ..####.###
    ..#.#.###.
    ...#.#.#.#

    Tile 2729:
    ...#.#.#.#
    ####.#....
    ..#.#.....
    ....#..#.#
    .##..##.#.
    .#.####...
    ####.#.#..
    ##.####...
    ##..#.##..
    #.##...##.

    Tile 3079:
    #.#.#####.
    .#..######
    ..#.......
    ######....
    ####.#..#.
    .#...#.##.
    #.#####.##
    ..#.###...
    ..#.......
    ..#.###...`);

    const result = day.part1();
    expect(result).toBe('20899048083289');
  });

  test('part 2 example 1', () => {
    day.loadData(`Tile 2311:
    ..##.#..#.
    ##..#.....
    #...##..#.
    ####.#...#
    ##.##.###.
    ##...#.###
    .#.#.#..##
    ..#....#..
    ###...#.#.
    ..###..###

    Tile 1951:
    #.##...##.
    #.####...#
    .....#..##
    #...######
    .##.#....#
    .###.#####
    ###.##.##.
    .###....#.
    ..#.#..#.#
    #...##.#..

    Tile 1171:
    ####...##.
    #..##.#..#
    ##.#..#.#.
    .###.####.
    ..###.####
    .##....##.
    .#...####.
    #.##.####.
    ####..#...
    .....##...

    Tile 1427:
    ###.##.#..
    .#..#.##..
    .#.##.#..#
    #.#.#.##.#
    ....#...##
    ...##..##.
    ...#.#####
    .#.####.#.
    ..#..###.#
    ..##.#..#.

    Tile 1489:
    ##.#.#....
    ..##...#..
    .##..##...
    ..#...#...
    #####...#.
    #..#.#.#.#
    ...#.#.#..
    ##.#...##.
    ..##.##.##
    ###.##.#..

    Tile 2473:
    #....####.
    #..#.##...
    #.##..#...
    ######.#.#
    .#...#.#.#
    .#########
    .###.#..#.
    ########.#
    ##...##.#.
    ..###.#.#.

    Tile 2971:
    ..#.#....#
    #...###...
    #.#.###...
    ##.##..#..
    .#####..##
    .#..####.#
    #..#.#..#.
    ..####.###
    ..#.#.###.
    ...#.#.#.#

    Tile 2729:
    ...#.#.#.#
    ####.#....
    ..#.#.....
    ....#..#.#
    .##..##.#.
    .#.####...
    ####.#.#..
    ##.####...
    ##..#.##..
    #.##...##.

    Tile 3079:
    #.#.#####.
    .#..######
    ..#.......
    ######....
    ####.#..#.
    .#...#.##.
    #.#####.##
    ..#.###...
    ..#.......
    ..#.###...`);

    const result = day.part2();
    expect(result).toBe('273');
  });
});
